/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LotteryEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Participation(bytes32,address,uint256)": EventFragment;
    "SaleCreation(bytes32,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Withdrawal(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Participation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ParticipationEventObject {
  saleId: string;
  participant: string;
  markTokenId: BigNumber;
}
export type ParticipationEvent = TypedEvent<
  [string, string, BigNumber],
  ParticipationEventObject
>;

export type ParticipationEventFilter = TypedEventFilter<ParticipationEvent>;

export interface SaleCreationEventObject {
  saleId: string;
  markToken: string;
  rewardToken: string;
  rewardTokenId: BigNumber;
  supply: BigNumber;
  price: BigNumber;
  endTime: BigNumber;
}
export type SaleCreationEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SaleCreationEventObject
>;

export type SaleCreationEventFilter = TypedEventFilter<SaleCreationEvent>;

export interface WithdrawalEventObject {
  saleId: string;
  participant: string;
}
export type WithdrawalEvent = TypedEvent<
  [string, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface LotteryEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Participation(bytes32,address,uint256)"(
      saleId?: PromiseOrValue<BytesLike> | null,
      participant?: PromiseOrValue<string> | null,
      markTokenId?: null
    ): ParticipationEventFilter;
    Participation(
      saleId?: PromiseOrValue<BytesLike> | null,
      participant?: PromiseOrValue<string> | null,
      markTokenId?: null
    ): ParticipationEventFilter;

    "SaleCreation(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      saleId?: PromiseOrValue<BytesLike> | null,
      markToken?: null,
      rewardToken?: null,
      rewardTokenId?: null,
      supply?: null,
      price?: null,
      endTime?: null
    ): SaleCreationEventFilter;
    SaleCreation(
      saleId?: PromiseOrValue<BytesLike> | null,
      markToken?: null,
      rewardToken?: null,
      rewardTokenId?: null,
      supply?: null,
      price?: null,
      endTime?: null
    ): SaleCreationEventFilter;

    "Withdrawal(bytes32,address)"(
      saleId?: PromiseOrValue<BytesLike> | null,
      participant?: PromiseOrValue<string> | null
    ): WithdrawalEventFilter;
    Withdrawal(
      saleId?: PromiseOrValue<BytesLike> | null,
      participant?: PromiseOrValue<string> | null
    ): WithdrawalEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
