/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LotteryHouseKeeping,
  LotteryHouseKeepingInterface,
} from "../../contracts/LotteryHouseKeeping";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RolesAuthority",
        name: "police",
        type: "address",
      },
      {
        internalType: "address",
        name: "_randomizer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract Authority",
        name: "newAuthority",
        type: "address",
      },
    ],
    name: "AuthorityUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "authority",
    outputs: [
      {
        internalType: "contract Authority",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newReceiver",
        type: "address",
      },
    ],
    name: "changeFundReceiver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fundRandomizer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fundReceiver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newLimit",
        type: "uint256",
      },
    ],
    name: "modifyRandomizerCallbackGas",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "randomizer",
    outputs: [
      {
        internalType: "contract IRandomizer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "randomizerCallbackGas",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract Authority",
        name: "newAuthority",
        type: "address",
      },
    ],
    name: "setAuthority",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawRandomizer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526001600255620186a06004553480156200001d57600080fd5b50604051620015e7380380620015e7833981810160405281019062000043919062000397565b8173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b59190620003de565b82816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019860405160405180910390a3505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200027a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002a09190620003de565b600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000410565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200031a82620002ed565b9050919050565b60006200032e826200030d565b9050919050565b620003408162000321565b81146200034c57600080fd5b50565b600081519050620003608162000335565b92915050565b62000371816200030d565b81146200037d57600080fd5b50565b600081519050620003918162000366565b92915050565b60008060408385031215620003b157620003b0620002e8565b5b6000620003c1858286016200034f565b9250506020620003d48582860162000380565b9150509250929050565b600060208284031215620003f757620003f6620002e8565b5b6000620004078482850162000380565b91505092915050565b6111c780620004206000396000f3fe60806040526004361061009c5760003560e01c80638da5cb5b116100645780638da5cb5b14610151578063bf7e214f1461017c578063c03634ff146101a7578063f10fb584146101d0578063f2fde38b146101fb578063fb4aa0a1146102245761009c565b806308e31fe2146100a157806326feb174146100ca578063374dd7e4146100d457806364006b69146100ff5780637a9e5e4b14610128575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610c98565b61024f565b005b6100d26102c6565b005b3480156100e057600080fd5b506100e9610489565b6040516100f69190610cd4565b60405180910390f35b34801561010b57600080fd5b5061012660048036038101906101219190610d4d565b61048f565b005b34801561013457600080fd5b5061014f600480360381019061014a9190610db8565b610540565b005b34801561015d57600080fd5b50610166610701565b6040516101739190610df4565b60405180910390f35b34801561018857600080fd5b50610191610725565b60405161019e9190610e6e565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c99190610c98565b61074b565b005b3480156101dc57600080fd5b506101e5610907565b6040516101f29190610eaa565b60405180910390f35b34801561020757600080fd5b50610222600480360381019061021d9190610d4d565b61092d565b005b34801561023057600080fd5b50610239610a37565b6040516102469190610df4565b60405180910390f35b61027d336000357fffffffff0000000000000000000000000000000000000000000000000000000016610a5d565b6102bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b390610f22565b60405180910390fd5b8060048190555050565b60016002541461030b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030290610f8e565b60405180910390fd5b60028081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ffd2e4334306040518363ffffffff1660e01b815260040161036e9190610df4565b6000604051808303818588803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b5050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d845a4b36004546040518263ffffffff1660e01b81526004016103fd9190610cd4565b6020604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610fc3565b5061047f6040518060400160405280600481526020017f7768617400000000000000000000000000000000000000000000000000000000815250610b9b565b6001600281905550565b60045481565b6104bd336000357fffffffff0000000000000000000000000000000000000000000000000000000016610a5d565b6104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390610f22565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061065a5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b700961333306000357fffffffff00000000000000000000000000000000000000000000000000000000166040518463ffffffff1660e01b81526004016106189392919061102b565b602060405180830381865afa158015610635573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610659919061109a565b5b61066357600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019860405160405180910390a350565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610779336000357fffffffff0000000000000000000000000000000000000000000000000000000016610a5d565b6107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af90610f22565b60405180910390fd5b6001600254146107fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f490610f8e565b60405180910390fd5b60028081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632465f8f530836040518363ffffffff1660e01b81526004016108619291906110c7565b600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156108fb573d6000803e3d6000fd5b50600160028190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61095b336000357fffffffff0000000000000000000000000000000000000000000000000000000016610a5d565b61099a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099190610f22565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610b3c57508073ffffffffffffffffffffffffffffffffffffffff1663b70096138530866040518463ffffffff1660e01b8152600401610afa9392919061102b565b602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b919061109a565b5b80610b92575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b610c3181604051602401610baf919061116f565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c34565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b6000819050919050565b610c7581610c62565b8114610c8057600080fd5b50565b600081359050610c9281610c6c565b92915050565b600060208284031215610cae57610cad610c5d565b5b6000610cbc84828501610c83565b91505092915050565b610cce81610c62565b82525050565b6000602082019050610ce96000830184610cc5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d1a82610cef565b9050919050565b610d2a81610d0f565b8114610d3557600080fd5b50565b600081359050610d4781610d21565b92915050565b600060208284031215610d6357610d62610c5d565b5b6000610d7184828501610d38565b91505092915050565b6000610d8582610d0f565b9050919050565b610d9581610d7a565b8114610da057600080fd5b50565b600081359050610db281610d8c565b92915050565b600060208284031215610dce57610dcd610c5d565b5b6000610ddc84828501610da3565b91505092915050565b610dee81610d0f565b82525050565b6000602082019050610e096000830184610de5565b92915050565b6000819050919050565b6000610e34610e2f610e2a84610cef565b610e0f565b610cef565b9050919050565b6000610e4682610e19565b9050919050565b6000610e5882610e3b565b9050919050565b610e6881610e4d565b82525050565b6000602082019050610e836000830184610e5f565b92915050565b6000610e9482610e3b565b9050919050565b610ea481610e89565b82525050565b6000602082019050610ebf6000830184610e9b565b92915050565b600082825260208201905092915050565b7f554e415554484f52495a45440000000000000000000000000000000000000000600082015250565b6000610f0c600c83610ec5565b9150610f1782610ed6565b602082019050919050565b60006020820190508181036000830152610f3b81610eff565b9050919050565b7f5245454e5452414e435900000000000000000000000000000000000000000000600082015250565b6000610f78600a83610ec5565b9150610f8382610f42565b602082019050919050565b60006020820190508181036000830152610fa781610f6b565b9050919050565b600081519050610fbd81610c6c565b92915050565b600060208284031215610fd957610fd8610c5d565b5b6000610fe784828501610fae565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61102581610ff0565b82525050565b60006060820190506110406000830186610de5565b61104d6020830185610de5565b61105a604083018461101c565b949350505050565b60008115159050919050565b61107781611062565b811461108257600080fd5b50565b6000815190506110948161106e565b92915050565b6000602082840312156110b0576110af610c5d565b5b60006110be84828501611085565b91505092915050565b60006040820190506110dc6000830185610de5565b6110e96020830184610cc5565b9392505050565b600081519050919050565b60005b838110156111195780820151818401526020810190506110fe565b60008484015250505050565b6000601f19601f8301169050919050565b6000611141826110f0565b61114b8185610ec5565b935061115b8185602086016110fb565b61116481611125565b840191505092915050565b600060208201905081810360008301526111898184611136565b90509291505056fea2646970667358221220f9d9ca443666cdd89bf853882377f057d491d4c4ae56fcf010bccae138c26c7964736f6c63430008110033";

type LotteryHouseKeepingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LotteryHouseKeepingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LotteryHouseKeeping__factory extends ContractFactory {
  constructor(...args: LotteryHouseKeepingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    police: PromiseOrValue<string>,
    _randomizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LotteryHouseKeeping> {
    return super.deploy(
      police,
      _randomizer,
      overrides || {}
    ) as Promise<LotteryHouseKeeping>;
  }
  override getDeployTransaction(
    police: PromiseOrValue<string>,
    _randomizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(police, _randomizer, overrides || {});
  }
  override attach(address: string): LotteryHouseKeeping {
    return super.attach(address) as LotteryHouseKeeping;
  }
  override connect(signer: Signer): LotteryHouseKeeping__factory {
    return super.connect(signer) as LotteryHouseKeeping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryHouseKeepingInterface {
    return new utils.Interface(_abi) as LotteryHouseKeepingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LotteryHouseKeeping {
    return new Contract(address, _abi, signerOrProvider) as LotteryHouseKeeping;
  }
}
